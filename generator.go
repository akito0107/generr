package generr

import (
	"bytes"
	"fmt"
	"io"

	"go/ast"

	"github.com/iancoleman/strcase"
	"github.com/pkg/errors"
	"golang.org/x/tools/imports"
)

type Generator struct {
	buf     bytes.Buffer
	pkgName string
	f       *ast.File
	ts      *ast.TypeSpec
}

func (g *Generator) Generate() error {
	g.AppendHeader()
	return nil
}

func (g *Generator) AppendHeader() {
	g.Printf("// Code generated by \"generr\"; DO NOT EDIT.\n")
	g.Printf("package %s\n", g.pkgName)
}

func (g *Generator) AppendCheckFunction() error {
	typeName := g.ts.Name.Name
	it := g.ts.Type.(*ast.InterfaceType)
	if len(it.Methods.List) != 1 {
		return errors.New("invalid interface signature")
	}
	g.Printf("func Is%s(err error) bool {\n", strcase.ToCamel(typeName))
	g.Printf("if e, ok := err.(%s); ok {\n", typeName)
	g.Printf("return e.%s")

	return nil
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

func (g *Generator) Out(w io.Writer, filename string) error {
	src := g.buf.Bytes()
	for i := 0; i < 2; i++ {
		dist, err := imports.Process(filename, src, &imports.Options{Comments: true})
		if err != nil {
			return err
		}
		src = dist
	}
	if _, err := io.Copy(w, bytes.NewReader(src)); err != nil {
		return err
	}
	return nil
}
