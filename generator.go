package generr

import (
	"io"

	"fmt"
	"go/ast"
	"go/format"
	"go/token"

	"github.com/iancoleman/strcase"
	"github.com/pkg/errors"
)

type Generator struct {
	pkgName string
	f       *ast.File
	ts      *ast.TypeSpec
}

func NewGenerator(pkgName string, ts *ast.TypeSpec) *Generator {
	return &Generator{
		pkgName: pkgName,
		f:       &ast.File{},
		ts:      ts,
	}
}

func (g *Generator) Generate() error {
	g.AppendPackage()
	return nil
}

func (g *Generator) AppendPackage() {
	g.f.Name = &ast.Ident{
		Name: g.pkgName,
	}
}

func (g *Generator) AppendCheckFunction() error {
	d, err := appendCheckFunction(g.f.Decls, g.ts)
	if err != nil {
		return err
	}
	g.f.Decls = d
	return nil
}

func (g *Generator) Out(w io.Writer, filename string) error {
	fmt.Fprintf(w, "// Code generated by \"generr\"; DO NOT EDIT.\n")

	format.Node(w, token.NewFileSet(), g.f)
	return nil
}

func appendCheckFunction(decls []ast.Decl, ts *ast.TypeSpec) ([]ast.Decl, error) {
	_, ok := ts.Type.(*ast.InterfaceType)
	if !ok {
		return nil, errors.Errorf("type %+v is not a interface", ts.Type)
	}
	rtTypes := []*ast.Field{
		{
			Type: ast.NewIdent("bool"),
		},
	}
	rtTypes = append(rtTypes)
	name := "Is" + strcase.ToCamel(ts.Name.Name)
	a := &ast.FuncDecl{
		Name: ast.NewIdent(name),
		Type: &ast.FuncType{
			Params: &ast.FieldList{
				List: []*ast.Field{
					{
						Names: []*ast.Ident{ast.NewIdent("err")},
						Type:  ast.NewIdent("error"),
					},
				},
			},
			Results: &ast.FieldList{
				List: rtTypes,
			},
		},
		Body: &ast.BlockStmt{
			List: []ast.Stmt{
				&ast.IfStmt{
					Init: &ast.AssignStmt{
						Lhs: []ast.Expr{
							ast.NewIdent("e"),
							ast.NewIdent("ok"),
						},
						Rhs: []ast.Expr{
							&ast.TypeAssertExpr{
								X:    ast.NewIdent("err"),
								Type: ts.Name,
							},
						},
						Tok: token.DEFINE,
					},
					Cond: ast.NewIdent("ok"),
					Body: &ast.BlockStmt{
						List: []ast.Stmt{
							&ast.ReturnStmt{
								Results: []ast.Expr{
									ast.NewIdent("true"),
								},
							},
						},
					},
				},
				&ast.ReturnStmt{
					Results: []ast.Expr{
						ast.NewIdent("false"),
					},
				},
			},
		},
	}
	decls = append(decls, a)

	return decls, nil
}
